name: CI
permissions:
  contents: read

on:
  pull_request:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run linters
        run: |
          . .venv/bin/activate
          make lint

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker images
        run: docker compose build

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install dependencies
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Run pytest
        run: |
          . .venv/bin/activate
          pytest -q

  smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install minimal runtime deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements-dev.txt
      - name: Start API (background)
        run: |
          . .venv/bin/activate
          uvicorn api.app:app --host 127.0.0.1 --port 8000 > uvicorn.log 2>&1 & echo $! > uvicorn.pid
          sleep 2
      - name: Curl /api/health
        run: |
          for i in {1..10}; do
            resp=$(curl -fsS http://127.0.0.1:8000/api/health || true)
            echo "$resp"
            echo "$resp" | grep -Eq '"ok"\s*:\s*true' && break
            sleep 0.5
          done
          if ! echo "$resp" | grep -Eq '"ok"\s*:\s*true'; then
            echo "API health check failed" >&2
            echo "--- uvicorn.log (tail) ---"
            tail -n 200 uvicorn.log || true
            exit 1
          fi
      - name: Stop API
        if: always()
        run: |
          kill $(cat uvicorn.pid) 2>/dev/null || true

  volume-smoke:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Prepare shared network and volumes
        run: |
          docker network create edge-net || true
          docker volume create edge_caddy_data || true
          docker volume create app_data || true
      - name: Bring up blue stack with compose
        env:
          PROJECT_NAME: loancalc-blue
        run: |
          docker compose -p "$PROJECT_NAME" up -d --build caddy api web
      - name: Wait for API health
        env:
          PROJECT_NAME: loancalc-blue
        run: |
          docker run --rm \
            --network=${PROJECT_NAME}_default \
            curlimages/curl:latest -sSf http://api:8000/api/health \
            > /dev/null
      - name: Assert app_data volume exists
        run: |
          docker volume inspect app_data >/dev/null
      - name: Assert /data mount in API container uses app_data
        env:
          PROJECT_NAME: loancalc-blue
        run: |
          CID=$(
            docker ps -q \
              --filter "label=com.docker.compose.service=api" \
              --filter "label=com.docker.compose.project=${PROJECT_NAME}"
          )
          echo "API container: $CID"
          test -n "$CID"
          docker inspect "$CID" | tee /tmp/inspect.json >/dev/null
          grep -q '"Destination": "/data"' /tmp/inspect.json
          grep -q '"Name": "app_data"' /tmp/inspect.json
      - name: Upload inspect artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: volume-smoke-inspect
          path: /tmp/inspect.json
          if-no-files-found: warn
      - name: Tear down blue stack
        if: always()
        env:
          PROJECT_NAME: loancalc-blue
        run: |
          docker compose -p "$PROJECT_NAME" down --remove-orphans || true
